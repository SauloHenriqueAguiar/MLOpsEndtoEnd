# Docker Compose para stack MLOps completa
# Versão para desenvolvimento e teste local
version: '3.8'

# Redes personalizadas
networks:
  mlops-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes persistentes
volumes:
  postgres_data:
    driver: local
  mlflow_artifacts:
    driver: local
  mlruns_data:
    driver: local
  model_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

services:
  # ================================
  # Database para MLflow
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: mlops-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: mlflow
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: mlflow_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - mlops-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ================================
  # MLflow Tracking Server
  # ================================
  mlflow:
    image: python:3.9-slim
    container_name: mlops-mlflow
    restart: unless-stopped
    environment:
      MLFLOW_BACKEND_STORE_URI: postgresql://mlflow:mlflow_password@postgres:5432/mlflow
      MLFLOW_DEFAULT_ARTIFACT_ROOT: /mlflow_artifacts
      MLFLOW_SERVER_HOST: 0.0.0.0
      MLFLOW_SERVER_PORT: 5000
    volumes:
      - mlflow_artifacts:/mlflow_artifacts
      - mlruns_data:/mlruns
    ports:
      - "5000:5000"
    networks:
      - mlops-network
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      bash -c "
      pip install mlflow==2.7.1 psycopg2-binary boto3 &&
      mlflow server 
      --backend-store-uri postgresql://mlflow:mlflow_password@postgres:5432/mlflow 
      --default-artifact-root /mlflow_artifacts 
      --host 0.0.0.0 
      --port 5000
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ================================
  # Model Training Service
  # ================================
  training:
    build:
      context: ../
      dockerfile: docker/Dockerfile.training
      target: production-training
    container_name: mlops-training
    restart: "no"  # Não reiniciar automaticamente após conclusão
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:5000
      PYTHONPATH: /app
      LOG_LEVEL: INFO
      OMP_NUM_THREADS: 4
    volumes:
      - ../data:/app/data
      - ../configs:/app/configs
      - ../notebooks:/app/notebooks
      - ../logs:/app/logs
      - mlruns_data:/app/mlruns
      - model_data:/app/models
    networks:
      - mlops-network
    depends_on:
      mlflow:
        condition: service_healthy
    profiles:
      - training  # Usar: docker-compose --profile training up

  # ================================
  # FastAPI Application
  # ================================
  api:
    build:
      context: ../
      dockerfile: docker/Dockerfile.api
      target: production
    container_name: mlops-api
    restart: unless-stopped
    environment:
      MODEL_PATH: /app/data/models
      MLFLOW_TRACKING_URI: http://mlflow:5000
      PYTHONPATH: /app
      LOG_LEVEL: INFO
      WORKERS: 2
      MAX_REQUESTS: 1000
    volumes:
      - ../data:/app/data:ro  # Read-only para segurança
      - ../configs:/app/configs:ro
      - ../logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - mlops-network
    depends_on:
      mlflow:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ================================
  # Jupyter Lab (Desenvolvimento)
  # ================================
  jupyter:
    build:
      context: ../
      dockerfile: docker/Dockerfile.training
      target: jupyter
    container_name: mlops-jupyter
    restart: unless-stopped
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:5000
      PYTHONPATH: /app
      JUPYTER_ENABLE_LAB: "yes"
    volumes:
      - ../notebooks:/app/notebooks
      - ../data:/app/data
      - ../src:/app/src
      - ../configs:/app/configs
      - ../logs:/app/logs
      - mlruns_data:/app/mlruns
    ports:
      - "8888:8888"
    networks:
      - mlops-network
    depends_on:
      mlflow:
        condition: service_healthy
    profiles:
      - development  # Usar: docker-compose --profile development up

  # ================================
  # Prometheus (Monitoramento)
  # ================================
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: mlops-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - mlops-network
    profiles:
      - monitoring

  # ================================
  # Grafana (Dashboards)
  # ================================
  grafana:
    image: grafana/grafana:10.1.0
    container_name: mlops-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    networks:
      - mlops-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # ================================
  # Redis (Cache - Opcional)
  # ================================
  redis:
    image: redis:7-alpine
    container_name: mlops-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - mlops-network
    profiles:
      - cache

  # ================================
  # Nginx (Load Balancer - Opcional)
  # ================================
  nginx:
    image: nginx:1.25-alpine
    container_name: mlops-nginx
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - mlops-network
    depends_on:
      - api
    profiles:
      - production

  # ================================
  # Model Validator (Job)
  # ================================
  validator:
    build:
      context: ../
      dockerfile: docker/Dockerfile.training
      target: training
    container_name: mlops-validator
    restart: "no"
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:5000
      PYTHONPATH: /app
      VALIDATION_MODE: "full"
    volumes:
      - ../data:/app/data
      - ../notebooks:/app/notebooks
      - ../logs:/app/logs
    networks:
      - mlops-network
    depends_on:
      - mlflow
      - training
    command: ["python", "notebooks/03_model_validation.py"]
    profiles:
      - validation

  # ================================
  # Data Drift Monitor (Scheduled)
  # ================================
  drift-monitor:
    build:
      context: ../
      dockerfile: docker/Dockerfile.training
      target: training
    container_name: mlops-drift-monitor
    restart: unless-stopped
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:5000
      PYTHONPATH: /app
      MONITORING_INTERVAL: 3600  # 1 hora
    volumes:
      - ../data:/app/data:ro
      - ../src:/app/src:ro
      - ../logs:/app/logs
    networks:
      - mlops-network
    depends_on:
      - api
    command: ["python", "src/monitoring/drift_detector.py"]
    profiles:
      - monitoring

  # ================================
  # Model Registry Backup
  # ================================
  backup:
    build:
      context: ../
      dockerfile: docker/Dockerfile.training
      target: training
    container_name: mlops-backup
    restart: "no"
    environment:
      BACKUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
      BACKUP_RETENTION_DAYS: 30
    volumes:
      - ../data:/app/data
      - ./backups:/app/backups
      - mlflow_artifacts:/app/mlflow_artifacts:ro
    networks:
      - mlops-network
    profiles:
      - backup

# ================================
# Configurações Extras
# ================================

# Healthcheck personalizado para todo o stack
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s

# Logging configuration
x-logging-defaults: &logging-defaults
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

# Restart policy
x-restart-policy: &restart-policy
  restart: unless-stopped