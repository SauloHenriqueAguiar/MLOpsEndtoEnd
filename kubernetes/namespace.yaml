# Kubernetes namespace for MLOps resources
apiVersion: v1
kind: Namespace
metadata:
  name: mlops
  labels:
    name: mlops
    purpose: machine-learning-operations
    environment: production
    team: data-science
  annotations:
    description: "Namespace for MLOps house price prediction application"
    contact: "mlops-team@company.com"
    created-by: "kubeflow-pipeline"
    
---
# Resource Quota for the namespace
apiVersion: v1
kind: ResourceQuota
metadata:
  name: mlops-resource-quota
  namespace: mlops
  labels:
    component: resource-management
spec:
  hard:
    # Compute resources
    requests.cpu: "20"
    requests.memory: 40Gi
    limits.cpu: "40"
    limits.memory: 80Gi
    
    # Storage resources
    requests.storage: 100Gi
    persistentvolumeclaims: "10"
    
    # Object counts
    pods: "50"
    replicationcontrollers: "20"
    secrets: "20"
    configmaps: "20"
    services: "20"
    deployments.apps: "20"
    replicasets.apps: "20"
    statefulsets.apps: "10"
    jobs.batch: "20"
    cronjobs.batch: "10"
    
---
# Limit Range for default resource constraints
apiVersion: v1
kind: LimitRange
metadata:
  name: mlops-limit-range
  namespace: mlops
  labels:
    component: resource-management
spec:
  limits:
  # Container limits
  - type: Container
    default:
      cpu: 500m
      memory: 1Gi
    defaultRequest:
      cpu: 100m
      memory: 256Mi
    max:
      cpu: "4"
      memory: 8Gi
    min:
      cpu: 50m
      memory: 128Mi
      
  # Pod limits
  - type: Pod
    max:
      cpu: "8"
      memory: 16Gi
    min:
      cpu: 50m
      memory: 128Mi
      
  # PVC limits
  - type: PersistentVolumeClaim
    max:
      storage: 50Gi
    min:
      storage: 1Gi
      
---
# Network Policy for namespace isolation
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mlops-network-policy
  namespace: mlops
  labels:
    component: security
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  
  # Ingress rules
  ingress:
  # Allow traffic from other pods in the same namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: mlops
    
  # Allow traffic from ingress controllers
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: istio-system
    
  # Allow monitoring traffic
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 9090
      
  # Egress rules
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
      
  # Allow HTTPS traffic
  - to: []
    ports:
    - protocol: TCP
      port: 443
      
  # Allow HTTP traffic
  - to: []
    ports:
    - protocol: TCP
      port: 80
      
  # Allow traffic to other pods in the same namespace
  - to:
    - namespaceSelector:
        matchLabels:
          name: mlops
          
  # Allow traffic to MLflow and other services
  - to: []
    ports:
    - protocol: TCP
      port: 5000  # MLflow
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
      
---
# Service Account for MLOps applications
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mlops-service-account
  namespace: mlops
  labels:
    component: security
  annotations:
    description: "Service account for MLOps applications"
automountServiceAccountToken: true

---
# Role for MLOps operations
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: mlops-role
  namespace: mlops
  labels:
    component: security
rules:
# Pod management
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["get", "list", "watch"]
  
# ConfigMap and Secret access
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
  
# Service access
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get", "list", "watch"]
  
# PVC access
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "watch"]
  
# Job management (for training jobs)
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  
# Deployment management (limited)
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]

---
# RoleBinding for MLOps service account
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: mlops-role-binding
  namespace: mlops
  labels:
    component: security
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: mlops-role
subjects:
- kind: ServiceAccount
  name: mlops-service-account
  namespace: mlops
  
---
# Pod Security Policy (if enabled in cluster)
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: mlops-psp
  namespace: mlops
  labels:
    component: security
spec:
  privileged: false
  allowPrivilegeEscalation: false
  
  # Required to prevent escalations to root
  requiredDropCapabilities:
    - ALL
    
  # Allow core volume types
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
    
  # Require non-root user
  runAsUser:
    rule: 'MustRunAsNonRoot'
    
  # Allow any group
  runAsGroup:
    rule: 'RunAsAny'
    
  # Require non-root filesystem
  fsGroup:
    rule: 'RunAsAny'
    
  # Read-only root filesystem
  readOnlyRootFilesystem: true
  
  # No host network/ports
  hostNetwork: false
  hostIPC: false
  hostPID: false
  
  # SELinux
  seLinux:
    rule: 'RunAsAny'